#######


Read_data_from_Tabula_Muris <- function(file){
	setwd('/zp1/data/plyu3/Cell_ann_test/Tabula_Muris_mouse_data')
	load(file)
	x = tiss
	x <- UpdateSeuratObject(object = x)
	x$celltype = x$cell_ontology_class
	return(x)
}


#######
#######
#######

RNA_process_UMAP_Cluster <- function(x,res){
	#####
	DefaultAssay(x) = 'RNA'
	#####
	x <- NormalizeData(x)
    x <- FindVariableFeatures(x,selection.method ='vst',nfeatures = 5000)
    x <- ScaleData(x,  verbose = FALSE)
    x <- RunPCA(x, verbose = FALSE,npcs=100)
    x <- RunUMAP(x, reduction = "pca", dims = 1:100)
	x <- FindNeighbors(x, reduction = "pca", dims = 1:100)
	x <- FindClusters(x, resolution = res)
	#####
	return(x)
}


#######
#######
#######

#####
##### 更改 cluster的编号 而不是 cell types ######
##### 根据celltypes 生成 cluster ###############
#####



RNA_process_Cluster_to_CT <- function(x,tag){
	x$seurat_clusters = as.numeric(x$seurat_clusters)
	#### rm NA #####
	k = which(is.na(x$celltype) == T)
	if(length(k)>0){x = x[,-k]}
	####
	#png_file = paste(tag,'_author_annotation','.png',sep='')
	#library(ggplot2)
	#png(png_file,height=4000,width=5000,res=72*12)
	#print(DimPlot(x, reduction = "umap",group.by='celltype',label = FALSE, label.size = 2.5, repel = TRUE))
	#dev.off()
	#### see the celltype and seurat_clusters table ####
	m = match(c('celltype','seurat_clusters'),colnames(x@meta.data))
	####
	tab = x@meta.data[,m]
	allcelltypes = levels(as.factor(tab$celltype))
	####
	align_table = list()
	for(i in 1:length(allcelltypes)){
		print(allcelltypes[i])
		tab_tmp = tab[which(tab$celltype == allcelltypes[i]),]
		tab_tmp_table = table(as.numeric(tab_tmp$seurat_clusters))
		print(tab_tmp_table)
		print(paste('total',sum(tab_tmp_table)))
		#######
		tab_tmp_res = tab_tmp
		rownames(tab_tmp_res) = NULL
		#######
		tab_tmp_res$index = paste(tab_tmp_res$celltype,as.numeric(tab_tmp_res$seurat_clusters),sep='@')
		tab_tmp_res = tab_tmp_res[!duplicated(tab_tmp_res$index),]
		m = match(tab_tmp_res$seurat_clusters,names(tab_tmp_table))
		tab_tmp_res$cellcount = as.numeric(tab_tmp_table)[m]
		#######
		####### added new clusters #######
		tab_tmp_res$new_clusters = paste(tab_tmp_res$seurat_clusters,i,sep='_')
		######## rm the cluster with too few cells #######
		k = which(tab_tmp_res$cellcount < 15)
		if(length(k) > 0 & sum(tab_tmp_table) > 50 & length(k) != length(tab_tmp_res$cellcount)){
			tab_tmp_res = tab_tmp_res[-k,]
		}
		if(length(k) > 0 & sum(tab_tmp_table) > 50 & length(k) == length(tab_tmp_res$cellcount)){
			tab_tmp_res$new_clusters = tab_tmp_res$new_clusters[1]
		}
		if(sum(tab_tmp_table) < 50){
			tab_tmp_res$new_clusters = tab_tmp_res$new_clusters[1]
		}
		########
		align_table = c(align_table,list(tab_tmp_res))
	}
	align_table = do.call('rbind',align_table)
	####
	#### Then replace the seurat clusters ######
	x$seurat_clusters_new = 'removed'
	for(i in 1:dim(align_table)[1]){
		tmp_celltype = align_table$celltype[i]
		tmp_seurat_clusters = align_table$seurat_clusters[i]
		k = which(x$celltype == tmp_celltype & x$seurat_clusters == tmp_seurat_clusters)
		x$seurat_clusters_new[k] = align_table$new_clusters[i]
	}
	x = subset(x,subset=seurat_clusters_new != 'removed')
	x$seurat_clusters_new = paste('C',x$seurat_clusters_new,sep='')
	####
	####
	x$seurat_clusters = x$seurat_clusters_new
	####
	#######
	png_file = paste(tag,'_cluster','.png',sep='')
	library(ggplot2)
	png(png_file,height=4000,width=5000,res=72*12)
	print(DimPlot(x, reduction = "umap",group.by='seurat_clusters_new',label = FALSE, label.size = 2.5, repel = TRUE))
	dev.off()
	png_file = paste(tag,'_celltype_author','.png',sep='')
	library(ggplot2)
	png(png_file,height=4000,width=5000,res=72*12)
	print(DimPlot(x, reduction = "umap",group.by='celltype',label = FALSE, label.size = 2.5, repel = TRUE))
	dev.off()
	#######
	return(x)
}




####

avg_Exp <- function(x,cluster,matrix_exp){
	k = which(cluster == x)
	matrix_exp_sub = matrix_exp[,k]
	####
	avg_vector = apply(matrix_exp_sub,1,mean)
	####
	return(avg_vector)
}


prepare_CellAnn <- function(Seurat_Obj,folder,sample_name,dims_name,cluster_name,matrix_name){
	###### output dims ######
	reductions_index = names(Seurat_Obj@reductions)
	k = which(reductions_index == dims_name)
	reductions_table = Seurat_Obj@reductions[[k]]@cell.embeddings
	######
	###### format: "cell" "cluster" "dim1" "dim2" #####
	Meta = Seurat_Obj@meta.data
	######
	cell = colnames(Seurat_Obj)
	k = which(colnames(Meta) == cluster_name)
	cluster = Meta[,k]
	###### add a "C" tag to each cluster ####
	if(length(grep(pattern = "^C", x = cluster[1])) == 0){
		cluster = paste('C',cluster,sep='')
		Meta[,k] = cluster
		#### ####
		####
	}
	######
	dim1 = reductions_table[,1]
	dim2 = reductions_table[,2]
	######
	dim_table = data.frame(cell,cluster,dim1,dim2)
	######
	if(dim(reductions_table)[2] == 3){
		dim3 = reductions_table[,3]
		dim_table = data.frame(cell_id,cluster,dim1,dim2,dim3)
	}
	######
	file_output = paste(sample_name,'_CellAnn_Step4_Input.txt',sep='')
	setwd(folder)
	######
	write.table(dim_table,file=file_output,sep='\t',row.names=F,quote=F)
	######
	###### calculate average expression 
	######
	###### matrix ######
	######
	######
	k = which(names(Seurat_Obj@assays) == matrix_name)
	matrix_exp = Seurat_Obj@assays[[k]]@data
	######
	clusters_list = as.list(levels(as.factor(cluster)))
	######
	matrix_exp_avg = sapply(clusters_list,avg_Exp,cluster=cluster,matrix_exp=matrix_exp)
	colnames(matrix_exp_avg) = unlist(clusters_list)
	matrix_exp_avg = round(matrix_exp_avg,3)
	######
	matrix_exp_avg = data.frame(matrix_exp_avg)
	######
	matrix_exp_avg$GENE = rownames(matrix_exp_avg)
	matrix_exp_avg = matrix_exp_avg[,c(dim(matrix_exp_avg)[2],2:(dim(matrix_exp_avg)[2]-1))]
	######
	######
	file_output = paste(sample_name,'_CellAnn_Step1_Input.txt',sep='')
	setwd(folder)
	write.table(matrix_exp_avg,file=file_output,sep='\t',row.names=F,quote=F)
}



loadRData <- function(fileName){
#loads an RData file, and returns it
    load(fileName)
    get(ls()[ls() != "fileName"])
}



CellAnn_Avg_Mat <- function(data_mat,data_cluster,log='log',scale_factor=10000){
	######
	tag_cluster = unname(data_cluster)
	tag_cluster_level = levels(as.factor(tag_cluster))
	###### normalized back datasets ######
	if(log == 'log'){
		data_mat_exp = exp(data_mat)
		data_mat_exp = data_mat_exp-1
	}
	if(log == 'log2'){
		data_mat_exp = 2^(data_mat)
		data_mat_exp = data_mat_exp-1
	}
	print(paste('Sums:',head(colSums(data_mat_exp[,c(1:5)]))))
	###### data_mat_exp is 1e5 normalize #######
	merge_mat = c()
	for(i in 1:length(tag_cluster_level)){
		index = which(data_cluster %in% tag_cluster_level[i] == T)
		index_mat = data_mat_exp[,index]
		######
		index_sum = rowSums(index_mat)
		######
		merge_mat = c(merge_mat,index_sum)
	}
	###
	merge_mat = matrix(merge_mat,nrow=dim(data_mat)[1])
	###
	rownames(merge_mat) = rownames(data_mat)
	colnames(merge_mat) = tag_cluster_level
	### colSums(merge_mat)
	scale = colSums(merge_mat)/scale_factor
	merge_mat = sweep(merge_mat,2,scale,FUN='/')
	### default norm ####
	merge_mat = round(log(merge_mat+1),5)
	return(merge_mat)
}


Avg_mat_to_df <- function(mat){
	df_1 = data.frame(GENE=rownames(mat))
	##
	df_2 = data.frame(mat)
	##
	out = cbind(df_1,df_2)
	##
	return(out)
}


df_to_mat <- function(df){
	rowN = df$GENE
	##
	mat = as.matrix(df[,-1])
	##
	rownames(mat) = rowN
	##
	return(mat)
}





Cell_Ann_scmapcluster = function(train,
                        test,
                        label_train,
                        threshold = 0.7,
                        time = T){
  train = as.matrix(train)
  test = as.matrix(test)
  ######
  start_time = Sys.time()
  ######
  sce = SingleCellExperiment(list(counts = train),colData = data.frame(cell_type1 = label_train))
  logcounts(sce) = log(counts(sce) + 1)
  rowData(sce)$feature_symbol = rownames(sce)
  sce = selectFeatures(sce)
  ######
  sce_test = SingleCellExperiment(list(counts = test))
  logcounts(sce_test) = log(counts(sce_test) + 1)
  rowData(sce_test)$feature_symbol = rownames(sce_test)

  sce = indexCluster(sce)
  scmapCluster_results = scmapCluster(projection = sce_test,index_list = list(sce@metadata$scmap_cluster_index),threshold = threshold)
  predict_label = scmapCluster_results$combined_labs

  end_time = Sys.time()

  times = as.numeric(difftime(end_time,start_time,units = 'secs'))

  if(time){
    return(list(predict_label = predict_label,times = times))
  }
  ####
  return(predict_label)
}


Cell_Ann_scpred = function(train,
                  test,
                  label_train,
                  model = 'svmRadial',
                  reclassify = NULL,
                  time = F,
                  threshold = 0.55){

  library(scPred)

  start_time = Sys.time()

  reference = CreateSeuratObject(train)
  query = CreateSeuratObject(test)

  reference = reference %>%
    #NormalizeData() %>%
    FindVariableFeatures() %>%
    ScaleData() %>%
    RunPCA() %>%
    RunUMAP(dims = 1:30)

  ## don't need to normalize ####
  #query = NormalizeData(query)

  reference$cell_type = label_train

  reference = getFeatureSpace(reference, "cell_type")

  reference = trainModel(reference,
                         model = model,
                         reclassify = reclassify)

  query = scPredict(query,
                    reference,
                    threshold = threshold)

  predict_label = unname(query$scpred_prediction)

  end_time = Sys.time()

  times = as.numeric(difftime(end_time,start_time,units = 'secs'))

  if(time){
    return(list(predict_label = predict_label,times = times))
  }

  return(predict_label)

}

