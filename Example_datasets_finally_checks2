#####
#### Example datasets prepare Finally check !!!!
#####



#####
#### 看一下 scmap-cluster 的参数是什么样的 ？
#####

Main_compare_process_OtherTools_Single_Cell <- function(compare_df,method='scmap-cluster',folder=folder){
	library(Seurat)
	##########
	out_table_list = list()
	query_label_list = list()
	ref_label_list = list()
	##########
	for(i in 1:dim(compare_df)[1]){
		#######
		TAG = paste('query:',compare_df$Query_new[i],'-->','ref:',compare_df$Ref_new[i],sep='')
		print(paste("NONONONONONONONONO",i))
		print(TAG)
		#######
		query = compare_df$Query_new[i]
		ref = compare_df$Ref_new[i]
		####### load ref and query seurat object !!!! #######
		setwd(folder)
		#######
		query_seurat = loadRData(query)
		ref_seurat = loadRData(ref)
		#######	OK! ############
		query_mat = query_seurat[['RNA']]@data
		query_label = unname(query_seurat$celltype)
		#######
		ref_mat = ref_seurat[['RNA']]@data
		ref_label = unname(ref_seurat$celltype)
		####### then we will filter query datasets if the mode == 'easy' !!!! ####
		####### prepare the datasets in the folder #####
		####### scmap-cluster First we don't need to try scmap-cluster !!!!! ################################
		if(method=='scmap-cluster'){
			library(scmap)
			library(SingleCellExperiment)
			#### we should load the input average expression data as the input !!!!! #########
			query_avg = paste0(query,'_Cluster_Avg') ### red ####
			query_mat = loadRData(query_avg)
			#### we will use the threshold to 0.5 #####
			#### then we load the query labels !!!! ###
			####
			query_label_index = paste0(query,'_GroundTruth_Cluster')
			query_label_tab = loadRData(query_label_index)
			m1 = match(colnames(query_mat),query_label_tab$cluster)
			query_label_tab = query_label_tab[m1,]
			####
			####
			#### train and test should be normalized counts #######
			query_mat_input = exp(query_mat)-1
			ref_mat_input = exp(ref_mat)-1
			ref_label_input = ref_label
			res = CellAnn_scmapcluster(ref_mat_input,query_mat_input,ref_label_input,threshold = 0.5,time = F)
			#####
			res = gsub('unassigned','Unassigned',res)
			#####
			res_table = data.frame(cluster=colnames(query_mat_input),result=res)
			res_table = list(res_table)
			names(res_table) = TAG
			out_table_list = c(out_table_list,res_table)
			ref_label_list = c(ref_label_list,list(ref_label))
			###### we need match the order of the avg matrix #######
 			query_label_list = c(query_label_list,list(query_label_tab))
		}
		if(method=='chetah'){
			library(CHETAH)
			library(SingleCellExperiment)
			#### train and test should be normalized counts #######
			query_mat_input = exp(query_mat)-1
			ref_mat_input = exp(ref_mat)-1
			ref_label_input = ref_label
			res = CellAnn_chetah(ref_mat_input,query_mat_input,ref_label_input,time = F)
			#####
			res_table = data.frame(cluster=colnames(query_mat_input),result=res)
			res_table = list(res_table)
			names(res_table) = TAG
			out_table_list = c(out_table_list,res_table)
			ref_label_list = c(ref_label_list,list(ref_label))
			query_label_list = c(query_label_list,list(query_label))
		}
		if(method=='seurat'){
			library(Seurat)
			#### train and test should be normalized counts #######
			query_mat_input = exp(query_mat)-1
			ref_mat_input = exp(ref_mat)-1
			ref_label_input = ref_label
			res = CellAnn_seurat(ref_mat_input,query_mat_input,ref_label_input,time = F)
			#####
			res_table = data.frame(cluster=colnames(query_mat_input),result=res)
			res_table = list(res_table)
			names(res_table) = TAG
			out_table_list = c(out_table_list,res_table)
			ref_label_list = c(ref_label_list,list(ref_label))
			query_label_list = c(query_label_list,list(query_label))
		}
		if(method=='scpred'){
			#### train and test should be normalized counts #######
			query_mat_input = exp(query_mat)-1
			ref_mat_input = exp(ref_mat)-1
			ref_label_input = ref_label
			ref_label_input = as.character(ref_label_input)
			res = CellAnn_scpred(ref_mat_input,query_mat_input,ref_label_input,time = F)
			#####
			res_table = data.frame(cluster=colnames(query_mat_input),result=res)
			res_table = list(res_table)
			names(res_table) = TAG
			out_table_list = c(out_table_list,res_table)
			ref_label_list = c(ref_label_list,list(ref_label))
			query_label_list = c(query_label_list,list(query_label))
		}
		if(method == 'scClassify'){
			library(scClassify)
			#### log-transformed (size-factor normalized) matrices as query datasets #####
			query_mat_input = query_mat
			ref_mat_input = ref_mat
			ref_label_input = ref_label
			####
			res = CellAnn_scClassify(query_mat_input,ref_mat_input,ref_label_input,time = F,prob_threshold=0.5)
			#### OK then we replace the '_' to ' & '
			res = gsub("_"," & ",res)
			####
			res_table = data.frame(cluster=colnames(query_mat_input),result=res)
			res_table = list(res_table)
			names(res_table) = TAG
			out_table_list = c(out_table_list,res_table)
			ref_label_list = c(ref_label_list,list(ref_label))
			query_label_list = c(query_label_list,list(query_label))
		}
	}
	####### Then Next tools !!!! ##########################
	#######
	out_table_list_v = Visualize_res(out_table_list,ref_label_list,query_label_list)
	#######
	return(out_table_list_v)
}


##### function： #########
##### 
CellAnn_scmapcluster = function(train,
                        test,
                        label_train,
                        threshold = 0.7,
                        time = T){
  start_time = Sys.time()
  ######
  sce = SingleCellExperiment(list(counts = train),colData = data.frame(cell_type1 = label_train))
  logcounts(sce) = log2(counts(sce) + 1)
  rowData(sce)$feature_symbol = rownames(sce)
  sce = selectFeatures(sce)
  ######
  sce_test = SingleCellExperiment(list(counts = test))
  logcounts(sce_test) = log2(counts(sce_test) + 1)
  rowData(sce_test)$feature_symbol = rownames(sce_test)
  ######
  sce = indexCluster(sce)
  scmapCluster_results = scmapCluster(projection = sce_test,index_list = list(sce@metadata$scmap_cluster_index),threshold = threshold)
  predict_label = scmapCluster_results$combined_labs
  #######
  end_time = Sys.time()
  #######
  times = as.numeric(difftime(end_time,start_time,units = 'secs'))
  #######
  if(time){
    return(list(predict_label = predict_label,times = times))
  }
  ########
  return(predict_label)
}

###### #######
###### load human datasets ########
###### #######


CellAnn_scClassify <- function(test = test,
                  train = train,
                  label_train = label_train,
                  time=T,
                  prob_threshold=0.5
                  ){
	#### first train the model ####
	####
	scClassify_res_ensemble <- scClassify(exprsMat_train = train,
                                      cellTypes_train = label_train,
                                      exprsMat_test = test,
                                      tree = "HC",
                                      algorithm = "WKNN",
                                      selectFeatures = c("limma"),
                                      similarity = c("pearson", "cosine"),
                                      weighted_ensemble = FALSE,
                                      returnList = FALSE,
                                      verbose = FALSE)
	####
	####
	start_time = Sys.time()
	pred_res <- scClassify_res_ensemble$testRes$test$ensembleRes$cellTypes
	#####
	end_time = Sys.time()
	times = as.numeric(difftime(end_time,start_time,units = 'secs'))
	if(time){
    	return(list(predict_label = pred_res$ensembleRes,times = times))
  	}
	return(pred_res)
}


#####
####
##
#


scmap_cluster_mouse_res_1 = Main_compare_process_OtherTools_Single_Cell(Mouse_compare_list_tab[[1]],method='scmap-cluster',folder=output_folder1)
scmap_cluster_mouse_res_2 = Main_compare_process_OtherTools_Single_Cell(Mouse_compare_list_tab[[2]],method='scmap-cluster',folder=output_folder2)
scmap_cluster_mouse_res_3 = Main_compare_process_OtherTools_Single_Cell(Mouse_compare_list_tab[[3]],method='scmap-cluster',folder=output_folder3)
scmap_cluster_mouse_res_4 = Main_compare_process_OtherTools_Single_Cell(Mouse_compare_list_tab[[4]],method='scmap-cluster',folder=Ori_folder)

scmap_cluster_mouse_res_list = list(scmap_cluster_mouse_res_1,scmap_cluster_mouse_res_2,scmap_cluster_mouse_res_3,scmap_cluster_mouse_res_4)
setwd(Ori_folder)
save(scmap_cluster_mouse_res_list,file='scmap_cluster_mouse_res_list')

##### 这个一幅图就是整个的图 #####

load('scmap_cluster_mouse_res_list')


#####
#### 下一步看看cellann是如何产生结果的 ？
#####


#####
####
#####

Analysis_cor <- function(cor_res,lower_cutoff = 0.4){
	####
	# lower_cutoff = 0.35
	###### print the max of cor_res ######
	print(apply(cor_res,1,max))
	######
	cor_resv = as.vector(cor_res)
	cor_resv = sort(cor_resv,decreasing=T)
	######
	model <- mclust::densityMclust(cor_resv,G=1:3)
	###### First we need to know how many models !!!!#########
	number_model = length(levels(as.factor(model$classification)))
	######
	###### Then we get the parameters for each model !!!! ####
	######
	model_mean_total = model$parameters$mean
	model_sd_total = model$parameters$variance$sigmasq
	######
	if(length(model_sd_total) == 1){
		model_sd_total = rep(model_sd_total,number_model)
	}
	###### OK!!! Next we find the cutoffs ########
	if(number_model == 3){
		#### we selected to 2!!! #####
		#### we will find the sencond clusters ####
		tmp_mean = model_mean_total[2]
		tmp_sd = model_sd_total[2]
		cutoff = qnorm(0.75,mean=tmp_mean,sd=sqrt(tmp_sd))
	}
	#######
	if(number_model == 2){
		#### we selected to 2!!! #####
		#### we use the cutoff between the 2 peaks !!!! ##########
		model_classification = as.numeric(model$classification)
		k = which(model$classification %in% model$classification[1] == F)
		index = max(cor_resv[k])
		cutoff = index
	}
	if(number_model == 1){
		#### we selected to 2!!! #####
		#### we use the cutoff between the 2 peaks !!!! ##########
		tmp_mean = model_mean_total[1]
		tmp_sd = model_sd_total[1]
		cutoff = qnorm(0.75,mean=tmp_mean,sd=sqrt(tmp_sd))
	}
	if(cutoff < lower_cutoff){
		cutoff = lower_cutoff
	}
	#####
	return(cutoff)
}



##############



#####
####
#####



ssh plyu3@omb2.onc.jhmi.edu
U[9C20&&

conda activate seurat4



res_list_to_plot <- function(res_list,name='Q=R',tag1="mouse"){
	######
	res_tab = list()
	for(i in 1:length(res_list)){
		#######
		tmp_table = data.frame(class=c('Correct_Classify','Correct_Classify_Half','Failed_Classify','Wrong_Classify','Correct_unClassify','Wrong_unClassify'),counts=0)
		#######
		res_v_sub = res_list[[i]]
		m = match('number',colnames(res_v_sub))
		if(is.na(m) == F){
			res_v_subSum = tapply(res_v_sub$number,res_v_sub$class1,sum)
			m = match(names(res_v_subSum),tmp_table$class)
			tmp_table$counts[m] = as.numeric(res_v_subSum)
		}else{
			res_v_subSum = data.frame(table(res_v_sub$class1))
			m = match(res_v_subSum$Var1,tmp_table$class)
			tmp_table$counts[m] = as.numeric(res_v_subSum$Freq)
		}
		#######
		tmp_table$name = name
		tmp_table$sample = names(res_list)[i]
		#######
		if(tag1=="mouse"){
			tmp_table$sample2 = gsub('query:Tabula_Muris_mouse_','',tmp_table$sample)
			tmp_table$sample2 = gsub('ref:Tabula_Muris_mouse_','',tmp_table$sample2)
			tmp_table$sample2 = gsub('_Query','',tmp_table$sample2)
			tmp_table$sample2 = gsub('_Ref','',tmp_table$sample2)
		}
		#######
		#######
		res_tab = c(res_tab,list(tmp_table))
	}
	######
	######
	######
	res_tab = do.call('rbind',res_tab)
	return(res_tab)
}


#####
###
#####

Ori_folder <- "/zp1/data/plyu3/CellAnn_performence_final_check/CellAnn_methods_test/Totally_compared_datasets/"
output_folder1 <- "/zp1/data/plyu3/CellAnn_performence_final_check/CellAnn_methods_test/Totally_mouse_equal_datasets/"
output_folder2 <- "/zp1/data/plyu3/CellAnn_performence_final_check/CellAnn_methods_test/Totally_mouse_querysmaller_datasets/"
output_folder3 <- "/zp1/data/plyu3/CellAnn_performence_final_check/CellAnn_methods_test/Totally_mouse_refsmaller_datasets/"


setwd(Ori_folder)
load("cellAnn_mouse_res_list")
cellAnn_mouse_res_plot1 = res_list_to_plot(cellAnn_mouse_res_list[[1]],name='Q=R',tag1="mouse")
cellAnn_mouse_res_plot2 = res_list_to_plot(cellAnn_mouse_res_list[[2]],name='Q<R',tag1="mouse")
cellAnn_mouse_res_plot3 = res_list_to_plot(cellAnn_mouse_res_list[[3]],name='Q>R',tag1="mouse")
cellAnn_mouse_res_plot4 = res_list_to_plot(cellAnn_mouse_res_list[[4]],name='Q//R',tag1="mouse")


setwd(Ori_folder)
load('scmap_cluster_mouse_res_list')
scmap_cluster_mouse_res_plot1 = res_list_to_plot(scmap_cluster_mouse_res_list[[1]],name='Q=R',tag1="mouse")
scmap_cluster_mouse_res_plot2 = res_list_to_plot(scmap_cluster_mouse_res_list[[2]],name='Q<R',tag1="mouse")
scmap_cluster_mouse_res_plot3 = res_list_to_plot(scmap_cluster_mouse_res_list[[3]],name='Q>R',tag1="mouse")
scmap_cluster_mouse_res_plot4 = res_list_to_plot(scmap_cluster_mouse_res_list[[4]],name='Q//R',tag1="mouse")

#####
setwd(Ori_folder)
load('chetah_mouse_res_list')
chetah_mouse_res_plot1 = res_list_to_plot(chetah_mouse_res_list[[1]],name='Q=R',tag1="mouse")
chetah_mouse_res_plot2 = res_list_to_plot(chetah_mouse_res_list[[2]],name='Q<R',tag1="mouse")
chetah_mouse_res_plot3 = res_list_to_plot(chetah_mouse_res_list[[3]],name='Q>R',tag1="mouse")
chetah_mouse_res_plot4 = res_list_to_plot(chetah_mouse_res_list[[4]],name='Q//R',tag1="mouse")


##### OK!!!! Next is the seurat !!!! #######
#####
setwd(Ori_folder)
load('Seurat_mouse_res_list')
Seurat_mouse_res_plot1 = res_list_to_plot(Seurat_mouse_res_list[[1]],name='Q=R',tag1="mouse")
Seurat_mouse_res_plot2 = res_list_to_plot(Seurat_mouse_res_list[[2]],name='Q<R',tag1="mouse")
Seurat_mouse_res_plot3 = res_list_to_plot(Seurat_mouse_res_list[[3]],name='Q>R',tag1="mouse")
Seurat_mouse_res_plot4 = res_list_to_plot(Seurat_mouse_res_list[[4]],name='Q//R',tag1="mouse")

######
######
setwd(Ori_folder)
load('scClassify_mouse_res_list')
scClassify_mouse_res_plot1 = res_list_to_plot(scClassify_mouse_res_list[[1]],name='Q=R',tag1="mouse")
scClassify_mouse_res_plot2 = res_list_to_plot(scClassify_mouse_res_list[[2]],name='Q<R',tag1="mouse")
scClassify_mouse_res_plot3 = res_list_to_plot(scClassify_mouse_res_list[[3]],name='Q>R',tag1="mouse")
scClassify_mouse_res_plot4 = res_list_to_plot(scClassify_mouse_res_list[[4]],name='Q//R',tag1="mouse")

#####
#####
setwd(Ori_folder)
load("scPred_mouse_res_list")
scPred_mouse_res_plot1 = res_list_to_plot(scPred_mouse_res_list[[1]],name='Q=R',tag1="mouse")
scPred_mouse_res_plot2 = res_list_to_plot(scPred_mouse_res_list[[2]],name='Q<R',tag1="mouse")
scPred_mouse_res_plot3 = res_list_to_plot(scPred_mouse_res_list[[3]],name='Q>R',tag1="mouse")
scPred_mouse_res_plot4 = res_list_to_plot(scPred_mouse_res_list[[4]],name='Q//R',tag1="mouse")





#############

scmap_cluster_mouse_res_plot_all = rbind(scmap_cluster_mouse_res_plot1,scmap_cluster_mouse_res_plot2,scmap_cluster_mouse_res_plot3,scmap_cluster_mouse_res_plot4)
colnames(scmap_cluster_mouse_res_plot_all)
levels_sample = scmap_cluster_mouse_res_plot_all$sample2
levels_sample = levels_sample[!duplicated(levels_sample)]
levels_sample = rev(levels_sample)
scmap_cluster_mouse_res_plot_all$sample2 = factor(scmap_cluster_mouse_res_plot_all$sample2,levels=levels_sample)
scmap_cluster_mouse_res_plot_all$class = factor(scmap_cluster_mouse_res_plot_all$class,levels=c('Correct_Classify','Correct_Classify_Half','Correct_unClassify','Failed_Classify','Wrong_Classify','Wrong_unClassify'))

library(ggplot2)
ggplot(scmap_cluster_mouse_res_plot_all,aes(x=sample2,y=counts,fill=class)) + geom_bar(position="fill", stat="identity") + coord_flip() + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + scale_fill_manual(values=c('#006994','lightblue','lightgreen','grey','red','pink')) + ylab('Cells (ratio)') + xlab('') + scale_y_continuous(expand=c(0,0))
ggsave("scmap-cluster_res_plot.png",width=8,height=8)



